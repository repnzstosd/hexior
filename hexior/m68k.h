#pragma once

//
#include <stdint.h>
#include <vector>

//
#include "memory.h"
#include "m68kStructures.h"


class M68K {
	public:

	public:
		M68K(void);
		~M68K(void);

		void			initialize(std::vector<Memory::mem> *memoryList);

		void			power();	// hard reset, also reset exception
		void			reset();	// reset exception
		int				step();		// emulate next opcode

		void			setInterrupt(uint8_t level);	// generated by external device (level 0 - 7), 0 -> disable, 7 -> NMI
		void			setInterruptType(Interrupt type) { mInterrupt = type; }	// default is AUTO_VECTOR

		uint16_t	openBus() { return mIRC; }	// last read PC value	- prefetcher..

		uint8_t		readByte(uint32_t offset);
		uint16_t	readWord(uint32_t offset);
		uint32_t	readLong(uint32_t offset);
		void			writeByte(uint32_t offset, uint8_t data);
		void			writeWord(uint32_t offset, uint16_t data);
		void			writeLong(uint32_t offset, uint32_t data);

		void			branch(uint16_t instruction);
		uint32_t	readData(uint8_t sourceMode, uint8_t sourceRegister, uint8_t operationSize);
		uint32_t	writeData(uint8_t sourceMode, uint8_t sourceRegister, uint8_t operationSize, uint32_t res);

	private:
		uint32_t	getInterruptVector(uint8_t level);

		void			traceException();
		void			illegalException(uint8_t iType);
		void			interruptException(uint8_t level);
		void			executeAt(uint8_t vector);
		void			switchToSupervisor();
		void			switchToUser();
		bool			checkCondition(uint8_t conditionCode);
		void			setFlags(uint8_t type, uint8_t size, uint64_t result, uint32_t source, uint32_t dest);

		uint8_t		bitSize(uint8_t size);
		uint32_t	getMSB(uint8_t size);
		uint32_t	bitMask(uint8_t size);
		uint32_t	maskValue(uint32_t value, uint8_t size);


	public:
		RegisterState		mSR;
		Register32			mDataRegister[8];
		Register32			mAddressRegister[8];
		Interrupt				mInterrupt;

		uint16_t				mIRC;
		uint16_t				mIRD;
		uint16_t				mIR;

		uint32_t				mSSP;
		uint32_t				mUSP;
		uint32_t				mPC;				// only the lower 24bits are used on m68k.

	private:
		static uint32_t	dummy_rw(uint32_t offset);

		std::vector<Memory::mem>	*mMemory;			// REMOVE ME; soon to be obsolete.

		memoryBank	*mMemoryBanks[65536];
};
